name: Execute Terraform Plan
description:  execute terraform plan on already created deployment , or create one if not exists.
branding:
  icon: cloud
  color: white
inputs:
  environment-name:
    description: Name of Cloudify environment to create
    required: true
  environment-id:
    description: Id of Cloudify environment to create
    default: "-"
    required: false
  module-file:
    description: URL/path to Terraform module archive
    required: true
  module-source-path:
    description: path to Terraform module inside the archive
    required: true
  variables-file:
    description: YAML/JSON file containing template variables
    required: false
    default: "-"
  environment-file:
    description: |
      YAML/JSON file containing environment variables to pass to the Terraform process
    required: false
    default: "-"
  environment-mapping:
    description: |
        A whitespace-delimited list of strings. For each item:

        * If it is of the form `k=v`, then the value of the environment variable `k` is passed
          as environment variable `v` to Terraform
        * Otherwise, let the value be `x`; then the environment variable `x` is passed as-is
          to Terraform

        This effectively passes environment variables, visible to the CI/CD platform,
        as environment variables to Terraform. Useful, among others, for
        passing Cloud credentials - stored in the CI/CD platform - to Terraform
    required: false
    default: "-"
  labels:
    description: |
      A labels list of the form <key>:<value>,<key>:<value>. 
      Any comma and colon in <value> must be escaped with \. 
      The labelsâ€™ keys are saved in lowercase.
    required: false
    default: "-"
outputs:
  terraform-plan:
    description: Terraform module plan
    value: ${{ steps.get_terraform_plan.outputs.plan }}
runs:
  using: "composite"
  steps:
    - name: Check if environment exists
      if: ${{ inputs.environment-id == '-' }}
      id: check_environment
      uses: cloudify-cosmo/environment-data-using-labels-action@v1.2
      with:
          environment-name: ${{ inputs.environment-name }}
          labels: ${{ inputs.labels }}
    - name: Set deployment exists
      id: check_if_deployment_exists
      shell: python
      run: |
        import io
        import os
        import json
        import yaml
        
        def prepare_parameters_file(variables, environment_variables):
          if variables not in ['', '-']:
            if os.path.isfile(variables):
              with io.open(variables, 'r', encoding='UTF-8') as f:
                variables = yaml.safe_load(f)
            else:
              variables = json.loads(variables)
          else:
            variables = ''
          if environment_variables not in ['', '-']:
            if os.path.isfile(environment_variables):
              with io.open(environment_variables, 'r', encoding='UTF-8') as f:
                environment_variables = yaml.safe_load(f)
            else:
              environment_variables = json.loads(environment_variables)
          else:
            environment_variables = ''
            
          workflow_parms = {
            'node_ids': ['terraform_module'],
            'source': "${{ inputs.module-file }}",
            'source_path': "${{ inputs.module-source-path }}",
            'variables': variables,
            'environment_variables': environment_variables,
          }
          with open('workflow_params.yaml', 'w') as outfile:
            yaml.dump(workflow_parms, outfile)
          
        
        deployment_id = "${{ inputs.environment-id }}"
        if deployment_id != '-':
          print ('::set-output name=exists::{0}'.format('true'))
          print ('::set-output name=deployment_id::{0}'.format(deployment_id))
          prepare_parameters_file("${{ inputs.variables-file }}", "${{ inputs.environment-file }}")
        else:
          environments = json.loads(r"""${{steps.check_environment.outputs.environment-data}}""")
          if len(environments)==0:
            print ('::set-output name=exists::{0}'.format('false'))
          elif len(environments)==1:
            print ('::set-output name=exists::{0}'.format('true'))
            print ('::set-output name=deployment_id::{0}'.format(environments[0].get('deployment_id')))
            prepare_parameters_file("${{ inputs.variables-file }}", "${{ inputs.environment-file }}")
          else:
            dep_ids = [dep.get('deployment_id') for dep in environments]
            raise Exception("Your name/labels may refer to these deployments {0} , please specify which one by using enviornemnt-id input".format(dep_ids))
          
    - name: Execute Terraform plan
      if: ${{ steps.check_if_deployment_exists.outputs.exists != 'true' }}
      id: terraform_plan
      uses: cloudify-cosmo/terraform-action@v1.2
      with:
          environment-name: ${{ inputs.environment-name }}
          module-file: ${{ inputs.module-file }}
          module-source-path: ${{ inputs.module-source-path }}
          variables-file: ${{ inputs.variables-file }}
          outputs-file: "env-plan-data.json"
          labels: ${{ inputs.labels }}
          plan: "true"
    
    - name: Execute Terraform plan workflow
      if: ${{ steps.check_if_deployment_exists.outputs.exists == 'true' }}
      id: terraform_plan_wf
      uses: cloudify-cosmo/execute-workflow-action@v1.2
      with:
        environment-name: ${{ steps.check_if_deployment_exists.outputs.deployment_id }}
        workflow: "terraform_plan"
        parameters-file: 'workflow_params.yaml'
      
        
    - name: Get Deployment ID
      if: ${{ steps.check_if_deployment_exists.outputs.exists != 'true' }}
      id: get_deployment_id
      shell: bash
      run: |
        content=`cat env-plan-data.json`
        # the following lines are only required for multi line json
        content="${content//'%'/'%25'}"
        content="${content//$'\n'/'%0A'}"
        content="${content//$'\r'/'%0D'}"
        # end of optional handling for multi line json
        echo "::set-output name=packageJson::$content"
        
    - name: get cloud resource node id
      id: get_node_ids
      uses: cloudify-cosmo/cli-action@v1.2
      with:
        command: nodes list -d ${{ steps.check_if_deployment_exists.outputs.deployment_id || fromJson(steps.get_deployment_id.outputs.packageJson).deployment_id}} --json
        
    - name: parse node_ids
      id: get_node_id
      shell: python
      run: |
        import json
        cli_output = ${{steps.get_node_ids.outputs.cli-output}}  
        nodes = json.loads(cli_output)
        for node in nodes:
          if node.get('type')=='cloudify.nodes.terraform.Module':
            print ('::set-output name=node_id::{0}'.format(node.id))
            break
    
    - name: get cloud resource node instance id
      id: get_instance_id
      uses: cloudify-cosmo/cli-action@v1.2
      with:
        command: node-instances list -d ${{ steps.check_if_deployment_exists.outputs.deployment_id || fromJson(steps.get_deployment_id.outputs.packageJson).deployment_id}} -n ${{steps.get_node_id.outputs.node_id}} --json

    - id: format_node_list
      name: format command output
      shell: python
      run: |
        import json
        cli_output = ${{steps.get_instance_id.outputs.cli-output}}
        instance_id = json.loads(cli_output)[0]['id']
        print ('::set-output name=instance-id::{0}'.format(instance_id))
    
    - name: get cloud resource instane runtime properties
      id: get_node_instance_runtime
      uses: cloudify-cosmo/cli-action@v1.2
      with:
        command: node-instances get ${{ steps.format_node_list.outputs.instance-id }} --json
        
    - name: get cloud resource plan runtime property
      id: get_terraform_plan
      shell: python
      run: |
        import json
        cli_output = ${{steps.get_node_instance_runtime.outputs.cli-output}}
        pretty_plan = json.loads(cli_output)['runtime_properties']['plain_text_plan']
        print('pretty_plan {0}'.format(pretty_plan))
        pretty_plan = pretty_plan.replace('%','%25')
        pretty_plan = pretty_plan.replace('\n','%0A')
        pretty_plan = pretty_plan.replace('\r','%0D')
        print ('::set-output name=plan::{0}'.format(pretty_plan))
 
